We have a garden that contains some flowers. The flowers are arranged into a rectangle with 2 rows and n columns. You are given a String[] garden that describes our garden. The String[] garden has two elements, each with n characters. Each character in garden represents one flower. Different characters in garden represent different colors.   Two flowers are considered adjacent if they are in the same column, or if they are next to each other in the same row. Your goal is to produce a garden in which no pair of adjacent flowers shares the same color. You may rearrange the flowers in your garden arbitrarily (without changing its shape). More precisely, you may swap any two flowers in your garden, and you may do so arbitrarily many times.   If the goal can be reached, return a String[] that will encode the resulting garden in the same format as was used for garden. If there are multiple solutions, you may return any of them. If there is no solution, return an empty String[].
Definition
    
Class:
ColorfulGarden
Method:
rearrange
Parameters:
String[]
Returns:
String[]
Method signature:
String[] rearrange(String[] garden)
(be sure your method is public)
Limits
    
Time limit (s):
2.000
Memory limit (MB):
256
Stack limit (MB):
256
Constraints
-
garden will contain exactly 2 elements, inclusive.
-
Each element in garden will contain between 1 and 50 characters, inclusive.
-
Each element in garden will contain the same number of characters.
-
Each character in garden will be a lowercase letter ('a'-'z').
Examples
0)

    
{"aa",
 "bb"}
Returns: {"ba", "ab" }
Swapping garden[0][1] and garden[1][1] produces a valid garden.
1)

    
{"xxxx",
 "xxxx"}
Returns: { }
No matter what we do, we will end up with the same result, and that is not a valid solution.
2)

    
{"abcd",
 "abcd"}
Returns: {"abcd", "dcba" }

3)

    
{"abcdefghijklm",
 "nopqrstuvwxyz"}
Returns: {"abcdefghijklm", "nopqrstuvwxyz" }

4)

    
{"aaa",
 "aab"}
Returns: { }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.